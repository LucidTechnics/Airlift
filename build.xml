<!--
 Copyright 2010, Lucid Technics, LLC.

 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 except in compliance with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in
 writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 specific language governing permissions and limitations under the License.
-->
<project name="${appName}" default="createPackageStructure" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

	<description>  Build file </description>
  
	<property file="desktop.build" />

	<property name="rootDir" value="${basedir}" />
	
	<property name="project" location="project" />
	<property name="archive" location="archive" />
	<property name="classes" location="classes" />
	<property name="workspace" location="workspace" />
	<property name="dist" location="dist" />
	<property name="junit-result" location="result" />
	<property name="runtime.lib" location="runtime-lib" />
	<property name="build.only.lib" location="build-only-lib" />
	<property name="bin" location="bin" />
	<property name="src" location="src" />
	<property name="src.shl" location="${src}/shl" />
	<property name="src.java" location="${src}/java" />
	<property name="src.script" location="${src}/script" />	
	<property name="src.javascript" location="${src.script}/javascript" />
	<property name="src.template" location="${src}/template" />
	<property name="src.test" location="${src}/test" />
	<property name="src.doc" location="${src}/doc" />
	<property name="src.cfg" location="${src}/cfg" />
	<property name="src.images" location="${src}/images" />
	<property name="src.script" location="${src}/script" />
	
	
	<property name="stage" location="stage" />
	<property name="stage.shl" location="${stage}/shl" />
	<property name="stage.java" location="${stage}/java" />
	<property name="stage.javascript" location="${stage}/java" />
	<property name="stage.template" location="${stage}/template" />
	<property name="stage.test" location="${stage}/test" />
	<property name="stage.cfg" location="${stage}/cfg" />
	<property name="stage.html" location="${stage}/html" />
	<property name="stage.images" location="${stage}/images" />
	<property name="stage.css" location="${stage}/css" />
	<property name="stage.script" location="${stage}/script" />
	<property name="stage.php" location="${stage}/php" />
	<property name="deployDir.shl" location="${deployDir}/shl" />
	<property name="deployDir.java" location="${deployDir}/java" />
	<property name="deployDir.template" location="${deployDir}/template" />
	<property name="deployDir.test" location="${deployDir}/test" />
	<property name="deployDir.javascript" location="${deployDir}/html" />
	<property name="deployDir.images" location="${deployDir}/images" />
	<property name="deployDir.script" location="${deployDir}/script" />
	<property name="deployDir.workspace" location="${deployDir}/workspace" />
	<property name="deployDir.bin" location="${deployDir}/bin" />
	<property name="deployDir.lib" location="${deployDir}/lib" />
	<property name="deployDir.log" location="${deployDir}/log" />
	
	<property name="jar" value="${appName}-${version}_${revision}" />
	<property name="testJar" value="${appName}Test-${version}_${revision}" />

	<path id="build.class.path">
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>

	<path id="run.class.path">
		<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${src.cfg}">
			<include name="**/*.xml"/>
		</fileset>
	</path>

	<path id="test.class.path">
	   	<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>		
		<fileset dir="${dist}">
			<include name="**/*Test*.jar"/>
		</fileset>
	</path>

	<!-- Make sure findbugs-ant.jar is included in your ant lib directory
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>

	<target name="findbugs" depends="jar">
		<findbugs home="${findbugs.home}" output="html" outputFile="${junit-result}/findbugs.html" >
			<sourcePath path="${src.java}" />
			<class location="${dist}/lib/${jar}-core.jar" />
		</findbugs>
	</target>
	 -->

	<!-- Clean -->
	<target name="clean" depends="clean-classes, clean-target" />

	<!-- Clean classes -->
	<target name="clean-classes">
		<delete dir="${classes}" />
		<delete dir="${dist}" />
	</target>

	<!-- Clean target -->
	<target name="clean-target">

	    <delete dir="${archive}" />
		<delete dir="${deployDir.bin}" />
		<delete dir="${deployDir.lib}" />
		<delete dir="${deployDir.cfg}" />
		<delete dir="${deployDir.log}" />
		<delete dir="${stage}" />

	</target>

	<!-- Init -->
	<target name="init">

		<mkdir dir="${project}" />
		<mkdir dir="${project}/artifacts" />
		<mkdir dir="${project}/artifacts/runtime-lib" />
		<mkdir dir="${project}/artifacts/build-only-lib" />

	    <mkdir dir="${archive}" />
		<mkdir dir="${runtime.lib}" />
		<mkdir dir="${build.only.lib}" />
		
		<mkdir dir="${stage}" />
		<mkdir dir="${stage.shl}" />
		<mkdir dir="${stage.template}" />
		<mkdir dir="${stage.test}" />
		<mkdir dir="${stage.images}" />
		<mkdir dir="${stage.script}" />
		<mkdir dir="${stage.javascript}" />

		<mkdir dir="${src}" />
		<mkdir dir="${src.shl}" />
		<mkdir dir="${src.java}" />
		<mkdir dir="${src.javascript}" />
		<mkdir dir="${src.template}" />
		<mkdir dir="${src.test}" />
		<mkdir dir="${src.doc}" />
		<mkdir dir="${src.images}" />
		<mkdir dir="${src.script}" />

		<mkdir dir="${deployDir}" />
		<mkdir dir="${deployDir.lib}" />
		<mkdir dir="${deployDir.bin}" />
		<mkdir dir="${deployDir.log}" />
		<mkdir dir="${deployDir.shl}" />
		<mkdir dir="${deployDir.template}" />
		<mkdir dir="${deployDir.javascript}" />
		<mkdir dir="${deployDir.test}" />
		<mkdir dir="${deployDir.images}" />
		<mkdir dir="${deployDir.script}" />

		<mkdir dir="${classes}" />
		<mkdir dir="${workspace}" />

		<mkdir dir="${dist}" />
		<mkdir dir="${dist}/lib" />

		<mkdir dir="${junit-result}" />
		<mkdir dir="${workspace}" />

	</target>

	<!-- Prepare source -->
	<target name="prepareSource" depends="createPackageStructure">

		<copy todir="${stage}" >
			<fileset dir="${src}" includes="**/*.xml, **/*log4j.properties, **/*.bat, **/*.sh, **/*.0, **/*.cf, **/*.conf, **/*.st" />
		</copy>

		<replace dir="${stage}" propertyFile="token.properties">
		  <include name="**/*.*"/>
		  <replacefilter token="@DEPLOY.DIR@" property="DEPLOY.DIR"/>
		  <replacefilter token="@LOG4J.JAR@" property="LOG4J.JAR"/>
		  <replacefilter token="@VERSION@" property="VERSION"/>
		  <replacefilter token="@APPNAME@" property="APPNAME"/>
		</replace>

	</target>

  	<!-- Compile -->
	<target name="reCompile" depends="clean-classes, compile" />

	<target name="compile" depends="prepareSource">
		<property name="build.class.path" refId="build.class.path"/>
		<echo message="${build.class.path}"/>

		<javac destdir="${classes}" debug="on">
			<classpath refid="build.class.path"/>
			<src path="${src.java}"/>
			<compilerarg line="-version" compiler="modern" />
		</javac>

		<javac destdir="${classes}" debug="on">
			<classpath refid="build.class.path"/>
			<src path="${src.test}"/>
		</javac>
	</target>

	<!-- Jar -->
	<target name="jar" depends="compile">

		 <jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${classes}"
			   excludes="**\*Test.class,**\*TestSuite.class"
		  />

		<jar destfile="${dist}/lib/${testJar}-core.jar"
		       basedir="${classes}"
		  />

		<jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${stage.template}"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${src.script}/javascript"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}-test.jar"
		       basedir="${src.test}/airlift/test"
		  />

    </target>

	<!-- Redeploy -->
	<target name="redeploy" depends="clean-classes, clean-target, compile, jar, deploy" />
	<target name="redeployTemplate" depends="clean-target, prepareSource, deploy" />

	<!-- Deploy -->
	<target name="deploy">

		<copy todir="${deployDir.lib}" flatten="false">
			<fileset dir="${runtime.lib}" includes="**/*.jar" />
		</copy>

		<copy todir="${deployDir.lib}">
			<fileset dir="${dist}/lib" includes="*.jar" />
		</copy>

		<copy todir="${deployDir.bin}">
			<fileset dir="${stage.shl}" includes="**/*.sh, **/*.bat" />
		</copy>

		<!-- Make application shell scripts executable -->
		<chmod dir="${deployDir.bin}" includes="**/*.sh"  perm="ugo+rx"/>

		<copy todir="${deployDir.template}">
			<fileset dir="${src.template}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.javascript}">
			<fileset dir="${src.javascript}" includes="**/*.js*" />
		</copy>

		<copy todir="${deployDir.images}">
			<fileset dir="${src.images}" includes="**/*.*" />
		</copy>
		
	</target>

	<target name="createRootPackageDirProperty" >

	  <pathconvert property="java.package.dir" targetos="${targetOs}" >
		  <path path="${rootPackage}" />
		  <mapper>
			 <chainedmapper>
				 <flattenmapper/>
				 <unpackagemapper from="*" to="${src.java}${file.separator}*" casesensitive="yes"/>
			 </chainedmapper>
		  </mapper>
	  </pathconvert>

	</target>

	<target name="createPackageStructure" depends="init, createRootPackageDirProperty" >
	   	  
		<mkdir dir="${java.package.dir}" />
		<mkdir dir="${java.package.dir}/util" />
		<mkdir dir="${java.package.dir}/exception" />				
		<mkdir dir="${java.package.dir}/domain" />
		<mkdir dir="${java.package.dir}/persist" />
		<mkdir dir="${java.package.dir}/dao" />
		<mkdir dir="${java.package.dir}/dao/search" />
		<mkdir dir="${java.package.dir}/dao/db" />
		<mkdir dir="${java.package.dir}/dao/serialize" />
		<mkdir dir="${java.package.dir}/controller" />				
		<mkdir dir="${java.package.dir}/servlet" />
		
	</target>
	   
	<target name="cleanProject" >
		<delete dir="${workspace}/build/" />
	</target>

	<target name="initProject" depends="redeploy" >
		<mkdir dir="${workspace}/build/runtime-lib" />
		<mkdir dir="${workspace}/build/runtime-lib/javascript" />
		<mkdir dir="${workspace}/build/build-only-lib" />
		
		<mkdir dir="${workspace}/build/src" />
		<mkdir dir="${workspace}/build/src/css" />
		<mkdir dir="${workspace}/build/src/script" />
		<mkdir dir="${workspace}/build/src/script/javascript" />
		<mkdir dir="${workspace}/build/src/script/javascript/hannibal/cfg" />
		<mkdir dir="${workspace}/build/src/cfg" />
		<mkdir dir="${workspace}/build/src/cfg/web" />
		<mkdir dir="${workspace}/build/src/cfg/hannibal" />

		<mkdir dir="${workspace}/src/cfg/web" />
	</target>
	
    <target name="quickProject" depends="cleanProject, initProject" >
		
	   	<copy todir="${workspace}/build/src/css">
			<fileset dir="${project}/artifacts/css" includes="**/*.*" />
		</copy>

		<copy todir="${workspace}/build/runtime-lib">
			<fileset dir="${project}/artifacts/runtime-lib" includes="**/*.jar" />
		</copy>

		<unzip src="${project}/artifacts/apache-tomcat-6.0.20.zip" dest="${workspace}/build/tomcat/" />

		<copy todir="${workspace}/build/tomcat/apache-tomcat-6.0.20/lib" flatten="true">
			<fileset dir="${workspace}/build/runtime-lib" includes="mysql/**/*.jar, hsqldb/**/*.jar"  />
		</copy>

		<copy todir="${workspace}/build/tomcat/apache-tomcat-6.0.20/lib">
			<fileset dir="${dist}/lib/" includes="*.jar" excludes="*est*.jar, *spring*.jar" />
		</copy>

		<chmod dir="${workspace}/build/tomcat" includes="**/*.sh, **/*.bat"  perm="ugo+rx"/>

		<mkdir dir="${workspace}/build/tomcat/apache-tomcat-6.0.20/logs" />
		
		<copy todir="${workspace}/build/build-only-lib">
			<fileset dir="${project}/artifacts/build-only-lib" includes="**/*.jar" />
		</copy>

		<copy todir="${workspace}/build/src/script/javascript/hannibal/cfg">
			<fileset dir="${project}/artifacts/" includes="hannibal.js" />
		</copy>

		<copy todir="${workspace}/build/src/cfg/hannibal">
			<fileset dir="${project}/artifacts/" includes="Hannibal.properties" />
		</copy>

		<copy todir="${workspace}/build/src/cfg/cache">
			<fileset dir="${project}/artifacts/" includes="cache.ccf" />
		</copy>

		<copy todir="${workspace}/build/src/cfg/web">
			<fileset dir="${project}/artifacts/" includes="web.xml, server.xml" />
		</copy>

		<copy todir="${workspace}/build/">
			<fileset dir="${project}/artifacts/" includes="hannibal.build, build.xml" />
		</copy>

		<copy todir="${workspace}/build/runtime-lib/hannibal">
			<fileset dir="${dist}/lib/" includes="*.jar" />
		</copy>

		<zip destfile="${dist}/hannibal-quick-project-${version}_${revision}.zip" basedir="${workspace}/build/"
			 includes="*/, **/*.*" />

    </target>  

	<target name="javadoc">
	   <javadoc
           destdir="${src.doc}/javadoc"
           author="true"
           version="true"
           use="true"
           windowtitle="${appName} Java API documentation">

		<classpath refid="test.class.path"/>

		<fileset dir="${src}" defaultexcludes="yes">
		</fileset>

		<doctitle><![CDATA[<h1>${appName}</h1>]]></doctitle>
		<bottom><![CDATA[<i>Generated by Airlift for Application ${appName}</i>]]></bottom>
		<tag name="todo" scope="all" description="To do:"/>
		<group title="Airlift Generated Code" packages="${package}.airlift.*"/>
		<link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
	   </javadoc>
	</target>

	<target name="test" depends="redeploy">
	   	<property name="run.class.path" refId="test.class.path"/>
		<echo message="${run.class.path}"/>
		<script language="javascript" src="test.js">
		    <classpath refid="test.class.path"/>			
		</script>
	</target>

	
</project>