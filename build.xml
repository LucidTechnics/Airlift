<!--
 Copyright 2010, Lucid Technics, LLC.

 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 except in compliance with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in
 writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 specific language governing permissions and limitations under the License.
-->
<project default="createPackageStructure" basedir=".">

	<description>  Build file </description>
  
	<property file="desktop.build" />
	<property environment="env"/>
	<property name="sdk.dir" location="${env.AIRLIFT_APP_ENGINE_DEV_HOME}" />
	<property name="rootDir" value="${basedir}" />
	
	<property name="project" location="project" />
	<property name="archive" location="archive" />
	<property name="classes" location="classes" />
	<property name="workspace" location="workspace" />
	<property name="dist" location="dist" />
	<property name="junit-result" location="result" />
	<property name="runtime.lib" location="runtime-lib" />
	<property name="build.only.lib" location="build-only-lib" />
	<property name="env" location="env" />
	<property name="downloads" location="downloads" />
	<property name="bin" location="bin" />
	<property name="src" location="src" />
	<property name="src.shl" location="${src}/shl" />
	<property name="src.java" location="${src}/java" />
	<property name="src.script" location="${src}/script" />	
	<property name="src.javascript" location="${src.script}/javascript" />
	<property name="src.template" location="${src}/template" />
	<property name="src.test" location="${src}/test" />
	<property name="src.doc" location="${src}/doc" />
	<property name="src.cfg" location="${src}/cfg" />
	<property name="src.images" location="${src}/images" />
	<property name="src.script" location="${src}/script" />
	
	<property name="stage" location="stage" />
	<property name="stage.shl" location="${stage}/shl" />
	<property name="stage.java" location="${stage}/java" />
	<property name="stage.javascript" location="${stage}/java" />
	<property name="stage.template" location="${stage}/template" />
	<property name="stage.test" location="${stage}/test" />
	<property name="stage.cfg" location="${stage}/cfg" />
	<property name="stage.html" location="${stage}/html" />
	<property name="stage.images" location="${stage}/images" />
	<property name="stage.css" location="${stage}/css" />
	<property name="stage.script" location="${stage}/script" />
	<property name="stage.php" location="${stage}/php" />
	<property name="deployDir.shl" location="${deployDir}/shl" />
	<property name="deployDir.java" location="${deployDir}/java" />
	<property name="deployDir.template" location="${deployDir}/template" />
	<property name="deployDir.test" location="${deployDir}/test" />
	<property name="deployDir.javascript" location="${deployDir}/html" />
	<property name="deployDir.images" location="${deployDir}/images" />
	<property name="deployDir.script" location="${deployDir}/script" />
	<property name="deployDir.workspace" location="${deployDir}/workspace" />
	<property name="deployDir.bin" location="${deployDir}/bin" />
	<property name="deployDir.lib" location="${deployDir}/lib" />
	<property name="deployDir.log" location="${deployDir}/log" />
	
	<property name="jar" value="${appName}-${version}_${revision}" />
	<property name="testJar" value="${appName}Test-${version}_${revision}" />

	<path id="build.class.path">
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>

	<path id="run.class.path">
		<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${src.cfg}">
			<include name="**/*.xml"/>
		</fileset>
	</path>

	<path id="test.class.path">
	   	<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>		
		<fileset dir="${dist}">
			<include name="**/*Test*.jar"/>
		</fileset>
	</path>

	<!-- Clean -->
	<target name="clean" depends="clean-classes, clean-target" />

	<!-- Clean classes -->
	<target name="clean-classes">
		<delete dir="${classes}" />
		<delete dir="${dist}" />
	</target>

	<!-- Clean target -->
	<target name="clean-target">

	    <delete dir="${archive}" />
		<delete dir="${deployDir.bin}" />
		<delete dir="${deployDir.lib}" />
		<delete dir="${deployDir.cfg}" />
		<delete dir="${deployDir.log}" />
		<delete dir="${deployDir.html}" />
		<delete dir="${stage}" />

	</target>

	<target name="copyjars" description="Copies the App Engine jars to the war file.">
	    <delete dir="${runtime.lib}/appengine" />
		<mkdir dir="${runtime.lib}/appengine" />
		<echo message="${sdk.dir}/lib/user"/>
		<copy todir="${runtime.lib}/appengine" flatten="true">
			<fileset dir="${sdk.dir}/lib/user">
				<include name="**/*.jar" />
				<exclude name="orm/**/*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- Init -->
	<target name="init">

		<mkdir dir="${project}" />
		<mkdir dir="${project}/artifacts" />
		<mkdir dir="${project}/artifacts/runtime-lib" />
		<mkdir dir="${project}/artifacts/build-only-lib" />

	    <mkdir dir="${archive}" />
		<mkdir dir="${runtime.lib}" />
		<mkdir dir="${build.only.lib}" />
		
		<mkdir dir="${stage}" />
		<mkdir dir="${stage.shl}" />
		<mkdir dir="${stage.template}" />
		<mkdir dir="${stage.test}" />
		<mkdir dir="${stage.images}" />
		<mkdir dir="${stage.script}" />
		<mkdir dir="${stage.javascript}" />

		<mkdir dir="${src}" />
		<mkdir dir="${src.shl}" />
		<mkdir dir="${src.java}" />
		<mkdir dir="${src.javascript}" />
		<mkdir dir="${src.template}" />
		<mkdir dir="${src.test}" />
		<mkdir dir="${src.doc}" />
		<mkdir dir="${src.images}" />
		<mkdir dir="${src.script}" />

		<mkdir dir="${deployDir}" />
		<mkdir dir="${deployDir.lib}" />
		<mkdir dir="${deployDir.bin}" />
		<mkdir dir="${deployDir.log}" />
		<mkdir dir="${deployDir.shl}" />
		<mkdir dir="${deployDir.template}" />
		<mkdir dir="${deployDir.test}" />
		<mkdir dir="${deployDir.images}" />
		<mkdir dir="${deployDir.script}" />

		<mkdir dir="${classes}" />
		<mkdir dir="${workspace}" />

		<mkdir dir="${dist}" />
		<mkdir dir="${dist}/lib" />

		<mkdir dir="${junit-result}" />
		<mkdir dir="${workspace}" />

	</target>

	<!-- Prepare source -->
	<target name="prepareSource" depends="createPackageStructure">

		<copy todir="${stage}" >
			<fileset dir="${src}" includes="**/*.xml, **/*log4j.properties, **/*.bat, **/*.sh, **/*.0, **/*.cf, **/*.conf, **/*.st" />
		</copy>

		<replace dir="${stage}" propertyFile="token.properties">
		  <include name="**/*.*"/>
		  <replacefilter token="@LOG4J.JAR@" property="LOG4J.JAR"/>
		  <replacefilter token="@VERSION@" property="VERSION"/>
		  <replacefilter token="@APPNAME@" property="APPNAME"/>
		</replace>

	</target>

  	<!-- Compile -->
	<target name="reCompile" depends="clean-classes, compile" />

	<target name="compile" depends="prepareSource">
		<property name="build.class.path" refId="build.class.path"/>
		<echo message="${build.class.path}"/>

		<javac includeantruntime="false" destdir="${classes}" debug="on" source="${java.source}" target="${java.target}">
			<classpath refid="build.class.path"/>
			<src path="${src.java}"/>
			<compilerarg line="-version" compiler="modern" />
		</javac>

		<javac includeantruntime="false" destdir="${classes}" debug="on" source="${java.source}" target="${java.target}">
			<classpath refid="build.class.path"/>
			<src path="${src.test}"/>
		</javac>
	</target>

	<!-- Jar -->
	<target name="jar" depends="compile">

		 <jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${classes}"
			   excludes="**\*Test.class,**\*TestSuite.class"
		  />

		<jar destfile="${dist}/lib/${testJar}-core.jar"
		       basedir="${classes}"
		  />

		<jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${stage.template}"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${src.script}/javascript"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}-test.jar"
		       basedir="${src.test}/airlift/test"
		  />

		<jar destfile="${dist}/lib/${jar}-test.jar"
		       basedir="${src.test}/airlift"
			   includes="harness.js"
			   update="true"
		  />

    </target>

	<!-- Redeploy -->
	<target name="redeploy" depends="clean-classes, clean-target, compile, jar, deploy" />
	<target name="redeployTemplate" depends="clean-target, prepareSource, deploy" />

	<!-- Deploy -->
	<target name="deploy">

		<copy todir="${deployDir.lib}" flatten="false">
			<fileset dir="${runtime.lib}" includes="**/*.jar" />
		</copy>

		<copy todir="${deployDir.lib}">
			<fileset dir="${dist}/lib" includes="*.jar" />
		</copy>

		<copy todir="${deployDir.bin}">
			<fileset dir="${stage.shl}" includes="**/*.sh, **/*.bat" />
		</copy>

		<!-- Make application shell scripts executable -->
		<chmod dir="${deployDir.bin}" includes="**/*.sh"  perm="ugo+rx"/>

		<copy todir="${deployDir.template}">
			<fileset dir="${src.template}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.images}">
			<fileset dir="${src.images}" includes="**/*.*" />
		</copy>
		
	</target>

	<target name="env" depends="redeploy" >
		<delete>
			<fileset dir="${env}/war/WEB-INF/lib" includes="airlift-*core.jar"/>
		</delete>

		<copy todir="${env}/war/WEB-INF/lib">
			<fileset dir="${dist}/lib/" includes="${jar}-core.jar" />
		</copy>

		<zip destfile="${downloads}/${jar}-env.zip" basedir="${env}" />
	
	</target>

	<target name="setUpEnvironment" depends="env" >
	  <delete dir ="workspace/env" />
	  <mkdir dir="workspace/env" />
	  <unzip src = "${downloads}/${jar}-env.zip" dest = "workspace/env" />
	  <mkdir dir = "workspace/env/war/WEB-INF/classes" />
	  <mkdir dir = "workspace/env/war/WEB-INF/classes/handler" />
	  <mkdir dir = "workspace/env/war/WEB-INF/classes/handler/registration" />
	  <copy todir="workspace/env/war/WEB-INF/classes/handler/registration">
			<fileset dir="${src}/test/script/javascript/handler/registration" />
		</copy>

	</target>

	<target name="startserver" depends="setUpEnvironment" description="Starts the new server." >
	  <exec dir="workspace/env" executable="ant" newenvironment="true">
	  <arg value="runserver" />
	</exec>
	</target>
	
	<target name="inttest" description="Just does the integration test.  NEEDS RUNNING SERVER.">
	  <sequential>
	  <waitfor maxwait="20" maxwaitunit="second" checkevery="500" timeoutproperty="timeout">
	    <and>
		<http url="http://localhost:8080/_ah/admin/" />
		<socket server="localhost" port="8080"/>
	    </and>
	   </waitfor>
	   <condition property="isTimeOut"> 
	      <isset property="timeout" />
	     </condition>
	   <fail message="...The server has failed to start.  Integration test has been aborted..." if="isTimeOut" />
	   <echo message="...The INTEGRATION TEST has BEGUN..." />
	   <exec dir="workspace/env" executable="ant" newenvironment="true">
	     <arg value="integrationtestns" />
	   </exec>
	   <echo message="...The INTEGRATION TEST has ENDED..." />
	   <!--<antcall target="exitDev" /> -->
	</sequential>
	</target>
	<target name="echo">
	  <echo message="testing new environment" />
	</target>

	<target name="serverRunningTest" if="isServerRunning">
	  <echo message="THE SERVER WAS RESOLVED TO TRUE" />
	</target>

	<target name="cinttest" depends="setUpEnvironment, trydownload" description="Starts the new server." >
 <parallel>
	<exec dir="workspace/env" executable="ant" newenvironment="true">
	  <arg value="runserver" />
	</exec>
	<sequential>
	  <!-- <waitfor maxwait="20" maxwaitunit="second" checkevery="500" timeoutproperty="timeout">
	    <and>
		<http url="http://localhost:8080/_ah/admin/" />
		<socket server="localhost" port="8080"/>
	    </and>
	   </waitfor> -->
	  <sleep seconds="30" />
	  <condition property="isServerRunning">
	   <!-- <http url="http://127.0.0.1:8080/_ah/admin/" /> -->
	    <http url="http://localhost:8080/_ah/admin/" />
	   <!-- <http url="http://localhost:8080/a/registration/" /> -->
	  </condition>
	  <antcall target="serverRunningTest" />
	  <antcall target="checkDir" />
	   <!-- <condition property="isTimeOut"> 
	      <isset property="timeout" />
	     </condition> 
	   <fail message="...The server has failed to start.  Integration test has been aborted..." if="isTimeOut" /> -->
	   <echo message="...The TEST SERVER is RUNNING..." />
	   <antcall target="doExist" />
	   <echo message="...The INTEGRATION TEST has BEGUN..." />
	   <exec dir="workspace/env" executable="ant" newenvironment="true">
	     <arg value="integrationtest" />
	   </exec>
	   <echo message="...The INTEGRATION TEST has ENDED..." />
	   <delete dir="${src}/AppEngineSDK" />
	   <!-- <antcall target="exitDev" /> -->
	</sequential>
</parallel>

	</target>

	<target name="checkDir">
	  <condition property="handler1" value="true" else="false">
	    <available file="workspace/env" type="dir" property="handlerA"/>
	  </condition>
	  <echo message="workspace/env found?: ${handler1}" />
	 
          <condition property="handler2" value="true" else="false">
	      <available file="workspace/env/war" type="dir" property="blah"/>
	  </condition>
	  <echo message="workspace/env/war found?: ${handler2}" />

	  <condition property="handler3" value="true" else="false">
	      <available file="workspace/env/war/WEB-INF" type="dir" property="blaha"/>
	  </condition>
	  <echo message="workspace/env/war/WEB-INF found?: ${handler3}" />

	  <condition property="handler4" value="true" else="false">
	      <available file="workspace/env/war/WEB-INF/classes" type="dir" property="blahaa"/>
	  </condition>
	  <echo message="workspace/env/war/WEB-INF/classes found?: ${handler4}" />

	  <condition property="handler5" value="true" else="false">
	      <available file="workspace/env/war/WEB-INF/classes/handler" type="dir" property="blahaaa"/>
	  </condition>
	  <echo message="workspace/env/war/WEB-INF/classes/handler found?: ${handler5}" />

	  <condition property="handler6" value="true" else="false">
	      <available file="workspace/env/war/WEB-INF/classes/handler/registration" type="dir" property="blaaaaah"/>
	  </condition>
	  <echo message="workspace/env/war/WEB-INF/classes/handler/registration found?: ${handler6}" />
	</target>

	<target name="doExist">
	  <property name="myprop" value="GET.js,POST.js,COLLECT.js,DELETE.js,PUT.js"/>
<filelist id="my.files" dir="workspace/env/war/WEB-INF/classes/handler/registration" files="${myprop}" />

<restrict id="missing.files">
  <filelist refid="my.files"/>
  <not>
    <exists/>
  </not>
</restrict>

<property name="missing.files" refid="missing.files" />
<condition property="pathExist" value="true" else="false">
    <length string="${missing.files}" length="0" />
</condition>
<echo message="Files all found: ${pathExist}" />
	</target>
	<target name="exitDev" depends="exitDevML, exitDevWin" />

	<target name="exitDevML" depends="checkos" if="isLinuxMac">
	  <exec dir="workspace/env/src/bash" executable="bash" failonerror="false">
	  <arg value="killserver.sh" />
	</exec>
</target>

<target name="exitDevWin" depends="checkos" if="isWindows">
<exec dir="workspace/env/src/bash" executable="bash" failonerror="false">
	  <arg value="killserver.bat" />
	</exec>
</target>

<target name="checkos">
	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isLinuxMac">
	  <or>
		<os family="unix" />
		<os family="mac" />
	  </or>
	</condition>


</target>

	<target name="createRootPackageDirProperty" >

	  <pathconvert property="java.package.dir" targetos="${targetOs}" >
		  <path path="${rootPackage}" />
		  <mapper>
			 <chainedmapper>
				 <flattenmapper/>
				 <unpackagemapper from="*" to="${src.java}${file.separator}*" casesensitive="yes"/>
			 </chainedmapper>
		  </mapper>
	  </pathconvert>

	</target>

	<target name="createPackageStructure" depends="init, createRootPackageDirProperty" >
	   	  
		<mkdir dir="${java.package.dir}" />
		<mkdir dir="${java.package.dir}/util" />
		<mkdir dir="${java.package.dir}/exception" />				
		<mkdir dir="${java.package.dir}/domain" />
		<mkdir dir="${java.package.dir}/persist" />
		<mkdir dir="${java.package.dir}/dao" />
		<mkdir dir="${java.package.dir}/dao/search" />
		<mkdir dir="${java.package.dir}/dao/db" />
		<mkdir dir="${java.package.dir}/dao/serialize" />
		<mkdir dir="${java.package.dir}/controller" />				
		<mkdir dir="${java.package.dir}/servlet" />
		
	</target>
		
	<target name="javadoc">
	   <javadoc
           destdir="${src.doc}/javadoc"
           author="true"
           version="true"
           use="true"
           windowtitle="${appName} Java API documentation">

		<classpath refid="test.class.path"/>

		<fileset dir="${src}" defaultexcludes="yes">
		</fileset>

		<doctitle><![CDATA[<h1>${appName}</h1>]]></doctitle>
		<bottom><![CDATA[<i>Generated by Airlift for Application ${appName}</i>]]></bottom>
		<tag name="todo" scope="all" description="To do:"/>
		<group title="Airlift Generated Code" packages="${package}.airlift.*"/>
		<link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
	   </javadoc>
	</target>
	
	<target name="test" depends="cinttest" />

	<target name="trydownload">
	  <sequential>
	 <mkdir dir="${src}/AppEngineSDK" />
	  <get src="http://googleappengine.googlecode.com/files/appengine-java-sdk-1.8.1.1.zip"
	       dest="${src}/AppEngineSDK"
	       verbose="false" />
	  <unzip src="${src}/AppEngineSDK/appengine-java-sdk-1.8.1.1.zip" dest="${src}/AppEngineSDK" />
	  </sequential>
	</target>
	<target name="test2" depends="redeploy"> <!--trydownload-->
	   	<property name="run.class.path" refId="test.class.path"/>
		<echo message="${run.class.path}"/>
		<script language="javascript" src="test.js">
		    <classpath refid="test.class.path"/>			
		</script>
	</target>

	
</project>