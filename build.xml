<project name="${appName}" default="createPackageStructure" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">

	<description>  Build file </description>
  
	<property file="desktop.build" />

	<property name="rootDir" value="${basedir}" />
	
	<property name="project" location="project" />
	<property name="archive" location="archive" />
	<property name="classes" location="classes" />
	<property name="workspace" location="workspace" />
	<property name="dist" location="dist" />
	<property name="junit-result" location="result" />
	<property name="runtime.lib" location="runtime-lib" />
	<property name="build.only.lib" location="build-only-lib" />
	<property name="bin" location="bin" />
	<property name="src" location="src" />
	<property name="src.shl" location="${src}/shl" />
	<property name="src.java" location="${src}/java" />
	<property name="src.script" location="${src}/script" />	
	<property name="src.javascript" location="${src.script}/javascript" />
	<property name="src.template" location="${src}/template" />
	<property name="src.test" location="${src}/test" />
	<property name="src.doc" location="${src}/doc" />
	<property name="src.cfg" location="${src}/cfg" />
	<property name="src.html" location="${src}/html" />
	<property name="src.images" location="${src}/images" />
	<property name="src.css" location="${src}/css" />
	<property name="src.script" location="${src}/script" />
	<property name="src.webapp" location="${src}/webapp" />
	<property name="src.webinf" location="${src.webapp}/WEB-INF" />
	<property name="src.php" location="${src}/php" />
	
	
	<property name="stage" location="stage" />
	<property name="stage.shl" location="${stage}/shl" />
	<property name="stage.java" location="${stage}/java" />
	<property name="stage.javascript" location="${stage}/java" />
	<property name="stage.template" location="${stage}/template" />
	<property name="stage.test" location="${stage}/test" />
	<property name="stage.cfg" location="${stage}/cfg" />
	<property name="stage.html" location="${stage}/html" />
	<property name="stage.images" location="${stage}/images" />
	<property name="stage.css" location="${stage}/css" />
	<property name="stage.script" location="${stage}/script" />
	<property name="stage.php" location="${stage}/php" />
	<property name="deployDir.shl" location="${deployDir}/shl" />
	<property name="deployDir.java" location="${deployDir}/java" />
	<property name="deployDir.template" location="${deployDir}/template" />
	<property name="deployDir.test" location="${deployDir}/test" />
	<property name="deployDir.cfg" location="${deployDir}/cfg" />
	<property name="deployDir.html" location="${deployDir}/html" />
	<property name="deployDir.javascript" location="${deployDir}/html" />
	<property name="deployDir.images" location="${deployDir}/images" />
	<property name="deployDir.css" location="${deployDir}/css" />
	<property name="deployDir.script" location="${deployDir}/script" />
	<property name="deployDir.sequence" location="${deployDir}/sequence" />
	<property name="deployDir.workspace" location="${deployDir}/workspace" />
	<property name="deployDir.bin" location="${deployDir}/bin" />
	<property name="deployDir.lib" location="${deployDir}/lib" />
	<property name="deployDir.log" location="${deployDir}/log" />
	
	<property name="jar" value="${appName}-${version}_${revision}" />
	<property name="testJar" value="${appName}Test-${version}_${revision}" />

	<path id="build.class.path">
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>

	<path id="run.class.path">
		<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${src.cfg}">
			<include name="**/*.xml"/>
		</fileset>
	</path>

	<path id="test.class.path">
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build-only-lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>		
		<fileset dir="${dist}">
			<include name="**/*Test*.jar"/>
		</fileset>
		<pathelement path="${src.cfg}"/>
		<pathelement location="certs"/>
	</path>

	<!-- Make sure findbugs-ant.jar is included in your ant lib directory
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>

	<target name="findbugs" depends="jar">
		<findbugs home="${findbugs.home}" output="html" outputFile="${junit-result}/findbugs.html" >
			<sourcePath path="${src.java}" />
			<class location="${dist}/lib/${jar}-core.jar" />
		</findbugs>
	</target>
	 -->

	<!-- Clean -->
	<target name="clean" depends="clean-classes, clean-target" />

	<!-- Clean classes -->
	<target name="clean-classes">
		<delete dir="${classes}" />
		<delete dir="${dist}" />
	</target>

	<!-- Clean target -->
	<target name="clean-target">

	    <delete dir="${archive}" />
		<delete dir="${deployDir.bin}" />
		<delete dir="${deployDir.lib}" />
		<delete dir="${deployDir.cfg}" />
		<delete dir="${deployDir.log}" />
		<delete dir="${stage}" />

	</target>

	<!-- Init -->
	<target name="init">

		<mkdir dir="${project}" />
		<mkdir dir="${project}/artifacts" />
		<mkdir dir="${project}/artifacts/runtime-lib" />
		<mkdir dir="${project}/artifacts/build-only-lib" />

	    <mkdir dir="${archive}" />
		<mkdir dir="${runtime.lib}" />
		<mkdir dir="${build.only.lib}" />
		
		<mkdir dir="${stage}" />
		<mkdir dir="${stage.shl}" />
		<mkdir dir="${stage.html}" />
		<mkdir dir="${stage.template}" />
		<mkdir dir="${stage.test}" />
		<mkdir dir="${stage.cfg}" />
		<mkdir dir="${stage.images}" />
		<mkdir dir="${stage.css}" />
		<mkdir dir="${stage.script}" />
		<mkdir dir="${stage.javascript}" />
		<mkdir dir="${stage.cfg}/${appName}" />

		<mkdir dir="${src}" />
		<mkdir dir="${src.shl}" />
		<mkdir dir="${src.java}" />
		<mkdir dir="${src.javascript}" />
		<mkdir dir="${src.template}" />
		<mkdir dir="${src.test}" />
		<mkdir dir="${src.doc}" />
		<mkdir dir="${src.cfg}" />
		<mkdir dir="${src.html}" />
		<mkdir dir="${src.images}" />
		<mkdir dir="${src.css}" />
		<mkdir dir="${src.script}" />
		<mkdir dir="${src.webapp}" />
		<mkdir dir="${src.webinf}" />
		<mkdir dir="${src.php}" />		

		<mkdir dir="${deployDir}" />
		<mkdir dir="${deployDir.lib}" />
		<mkdir dir="${deployDir.bin}" />
		<mkdir dir="${deployDir.log}" />
		<mkdir dir="${deployDir.sequence}" />
		<mkdir dir="${deployDir.shl}" />
		<mkdir dir="${deployDir.html}" />
		<mkdir dir="${deployDir.template}" />
		<mkdir dir="${deployDir.javascript}" />
		<mkdir dir="${deployDir.test}" />
		<mkdir dir="${deployDir.cfg}" />
		<mkdir dir="${deployDir.html}" />
		<mkdir dir="${deployDir.images}" />
		<mkdir dir="${deployDir.css}" />
		<mkdir dir="${deployDir.script}" />
		<mkdir dir="${deployDir.cfg}/${appName}" />

		<mkdir dir="${classes}" />
		<mkdir dir="${workspace}" />

		<mkdir dir="${dist}" />
		<mkdir dir="${dist}/lib" />

		<mkdir dir="${junit-result}" />
		<mkdir dir="${workspace}" />

	</target>

	<!-- Prepare source -->
	<target name="prepareSource" depends="createPackageStructure">

		<copy todir="${stage}" >
			<fileset dir="${src}" includes="**/*.xml, **/*log4j.properties, **/*.bat, **/*.sh, **/*.0, **/*.cf, **/*.conf, **/*.st" />
		</copy>

		<replace dir="${stage}" propertyFile="token.properties">
		  <include name="**/*.*"/>
		  <replacefilter token="@DEPLOY.DIR@" property="DEPLOY.DIR"/>
		  <replacefilter token="@LOG4J.JAR@" property="LOG4J.JAR"/>
		  <replacefilter token="@VERSION@" property="VERSION"/>
		  <replacefilter token="@APPNAME@" property="APPNAME"/>
		</replace>

	</target>

  	<!-- Compile -->
	<target name="reCompile" depends="clean-classes, compile" />

	<target name="compile" depends="prepareSource">
		<property name="build.class.path" refId="build.class.path"/>
		<echo message="${build.class.path}"/>

		<javac destdir="${classes}" debug="on">
			<classpath refid="build.class.path"/>
			<src path="${src.java}"/>
			<compilerarg line="-version" compiler="modern" />
		</javac>

		<javac destdir="${classes}" debug="on">
			<classpath refid="build.class.path"/>
			<src path="${src.test}"/>
		</javac>
	</target>

	<!-- Jar -->
	<target name="jar" depends="compile">

		 <jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${classes}"
			   excludes="**\*Test.class,**\*TestSuite.class, **\*spring*\, **\*php\"
		  />

		<jar destfile="${dist}/lib/${testJar}-core.jar"
		       basedir="${classes}"
		  />

		<jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${stage.template}"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${src.script}/javascript"
			   update="true"
		  />		

		<jar destfile="${dist}/lib/${jar}-spring.jar"
		       basedir="${classes}"
			   includes="**\*spring*\*.*"
		  />

		<tar destfile="${dist}/lib/${jar}-php.tar"
		       basedir="${src.php}"
			   includes="**\*.*"
		  />

    </target>

	<!-- Redeploy -->
	<target name="redeploy" depends="clean-classes, clean-target, compile, jar, deploy" />
	<target name="redeployTemplate" depends="clean-target, prepareSource, deploy" />

	<!-- Deploy -->
	<target name="deploy">

		<copy todir="${deployDir.lib}" flatten="false">
			<fileset dir="${runtime.lib}" includes="**/*.jar" />
		</copy>

		<copy todir="${deployDir.lib}">
			<fileset dir="${dist}/lib" includes="*.jar" />
		</copy>

		<copy todir="${deployDir.bin}">
			<fileset dir="${stage.shl}" includes="**/*.sh, **/*.bat" />
		</copy>

		<!-- Make application shell scripts executable -->
		<chmod dir="${deployDir.bin}" includes="**/*.sh"  perm="ugo+rx"/>

		<!-- copy config files -->
		<copy todir="${deployDir.cfg}">
			<fileset dir="${stage.cfg}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.html}">
			<fileset dir="${src.html}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.template}">
			<fileset dir="${src.template}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.javascript}">
			<fileset dir="${src.javascript}" includes="**/*.js*" />
		</copy>

		<copy todir="${deployDir.images}">
			<fileset dir="${src.images}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.css}">
			<fileset dir="${src.css}" includes="**/*.*" />
		</copy>
		
	</target>

	<target name="hardRedeploy"  depends="redeploy, startup" />

	<target name="hardDeploy"  depends="deploy, startup" />

	<target name="buildWar" depends="deploy" >
		<war destfile="${archive}/${appName}.war" webxml="${deployDir.cfg}/**/web.xml">
		   
			<zipfileset dir="${deployDir.html}" prefix="html"/>
			<zipfileset dir="${deployDir.javascript}" prefix="javascript"/>
			<zipfileset dir="${deployDir.template}" prefix="template" />
			<zipfileset dir="${deployDir.css}" prefix="css" />
			<zipfileset dir="${stage.images}" prefix="images" />
			<zipfileset dir="${deployDir.script}" prefix="WEB-INF/script" />
			
			<lib dir="${deployDir.lib}" />
			<classes dir="${classes}"/>
		</war>
	</target>

	<target name="createRootPackageDirProperty" >

	  <pathconvert property="java.package.dir" targetos="${targetOs}" >
		  <path path="${rootPackage}" />
		  <mapper>
			 <chainedmapper>
				 <flattenmapper/>
				 <unpackagemapper from="*" to="${src.java}${file.separator}*" casesensitive="yes"/>
			 </chainedmapper>
		  </mapper>
	  </pathconvert>

	</target>

	<target name="createPackageStructure" depends="init, createRootPackageDirProperty" >
	   	  
		<mkdir dir="${java.package.dir}" />
		<mkdir dir="${java.package.dir}/util" />
		<mkdir dir="${java.package.dir}/exception" />				
		<mkdir dir="${java.package.dir}/domain" />
		<mkdir dir="${java.package.dir}/persist" />
		<mkdir dir="${java.package.dir}/dao" />
		<mkdir dir="${java.package.dir}/dao/search" />
		<mkdir dir="${java.package.dir}/dao/db" />
		<mkdir dir="${java.package.dir}/dao/serialize" />
		<mkdir dir="${java.package.dir}/controller" />				
		<mkdir dir="${java.package.dir}/servlet" />
		
	</target>
	
	<target name="deployWebApp" depends="buildWar" >
	   
	</target>
	
	<!-- Start -->
	<target name="startup" depends="jetty-start">
		<echo>Starting server instance</echo>
	</target>

	<target name="shutdown" depends="jetty-stop">
		<echo>Stopping server instance</echo>
	</target>	

	<target name="unit-test" depends="compile, jar">

		<property name="test.class.path" refId="test.class.path"/>
		<echo message="Class path is:  ${test.class.path}"/>

		<junit printsummary="yes" haltonfailure="no">
			<!--<jvmarg value="-Xmx512m -Xmn512m"/>-->
			<classpath>
				<pathelement path="${test.class.path}"/>
			</classpath>
			<formatter type="plain"/>

			<batchtest fork="yes" todir="${junit-result}">
				<fileset dir="${src.test}">
					<include name="**/*Test.java"/>
					<exclude name="**/*TestSuite.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<taskdef resource="checkstyletask.properties"
         classpath="/home/bediako/app/checkstyle/checkstyle-5.0/checkstyle-all-5.0.jar"/>

	<macrodef name="jetty-start">
		<attribute name="arg1" default=""/>
		<attribute name="arg2" default=""/>
		<sequential>
			<antcall target="jetty-stop"/>
			<java jar="${jettyHome}/start.jar" fork="true" spawn="yes" dir="${jettyHome}">
				<jvmarg value="-Dfile.encoding=UTF-8"/>
				<jvmarg value="-DSTOP.PORT=8079"/>
				<jvmarg value="-DSTOP.KEY=secret"/>
				<jvmarg value="@{arg1}"/>
				<jvmarg value="@{arg2}"/>
			</java>
		</sequential>
	</macrodef>

	<target name="jetty-check-status">
		<condition property="jetty.started">
			<socket server="localhost" port="8080"/>
		</condition>
	</target>

	<target name="jetty-start" depends="deploy">
		<jetty-start/>
	</target>

	<target name="jetty-start-debug" depends="deploy">
		<jetty-start
			arg1="-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"
			arg2="-Xdebug"/>
	</target> 

	<target name="jetty-stop" depends="jetty-check-status" if="jetty.started">
		<java jar="${jettyHome}/start.jar" fork="true" spawn="yes" dir="${jettyHome}">
			<jvmarg value="-DSTOP.PORT=8079"/>
			<jvmarg value="-DSTOP.KEY=secret"/>
			<arg value="--stop"/>
		</java>
		<sleep seconds="2"/>
	</target>


    <!-- =================================
         Installs ivy with magic
         ================================= -->
    <property name="ivy.install.version" value="2.0.0-alpha-2-incubating" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <property name="build.dir" value="build" />                       

    <target name="install-ivy" description="--> install ivy">
    	<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
    	<get src="http://people.apache.org/~xavier/ivy/${ivy.install.version}/ivy.jar"
    		 dest="${ivy.jar.file}" usetimestamp="true"/>

    	<!-- try to load ivy here from local ivy dir, in case the user has not already dropped
    	      it into ant's lib dir (note that the latter copy will always take precedence).
    	      We will not fail as long as local lib dir exists (it may be empty) and
    	      ivy is in at least one of ant's lib dir or the local lib dir. -->
    	<path id="ivy.lib.path">
    	    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    	</path>
    	<taskdef resource="org/apache/ivy/ant/antlib.xml"
    	          uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- =================================
        target: resolve
         ================================= -->
    <target name="resolve" depends="install-ivy" description="--> retreive dependencies with ivy">
        <ivy:retrieve/>
    </target>  

	<target name="cleanProject" >
		<delete dir="${workspace}/build/" />
	</target>

	<target name="initProject" depends="redeploy" >
		<mkdir dir="${workspace}/build/runtime-lib" />
		<mkdir dir="${workspace}/build/runtime-lib/javascript" />
		<mkdir dir="${workspace}/build/build-only-lib" />
		
		<mkdir dir="${workspace}/build/src" />
		<mkdir dir="${workspace}/build/src/css" />
		<mkdir dir="${workspace}/build/src/script" />
		<mkdir dir="${workspace}/build/src/script/javascript" />
		<mkdir dir="${workspace}/build/src/script/javascript/hannibal/cfg" />
		<mkdir dir="${workspace}/build/src/cfg" />
		<mkdir dir="${workspace}/build/src/cfg/web" />
		<mkdir dir="${workspace}/build/src/cfg/hannibal" />

		<mkdir dir="${workspace}/src/cfg/web" />
	</target>
	
    <target name="quickProject" depends="cleanProject, initProject" >
		
	   	<copy todir="${workspace}/build/src/css">
			<fileset dir="${project}/artifacts/css" includes="**/*.*" />
		</copy>

		<copy todir="${workspace}/build/runtime-lib">
			<fileset dir="${project}/artifacts/runtime-lib" includes="**/*.jar" />
		</copy>

		<unzip src="${project}/artifacts/apache-tomcat-6.0.20.zip" dest="${workspace}/build/tomcat/" />

		<copy todir="${workspace}/build/tomcat/apache-tomcat-6.0.20/lib" flatten="true">
			<fileset dir="${workspace}/build/runtime-lib" includes="mysql/**/*.jar, hsqldb/**/*.jar"  />
		</copy>

		<copy todir="${workspace}/build/tomcat/apache-tomcat-6.0.20/lib">
			<fileset dir="${dist}/lib/" includes="*.jar" excludes="*est*.jar, *spring*.jar" />
		</copy>

		<chmod dir="${workspace}/build/tomcat" includes="**/*.sh, **/*.bat"  perm="ugo+rx"/>

		<mkdir dir="${workspace}/build/tomcat/apache-tomcat-6.0.20/logs" />
		
		<copy todir="${workspace}/build/build-only-lib">
			<fileset dir="${project}/artifacts/build-only-lib" includes="**/*.jar" />
		</copy>

		<copy todir="${workspace}/build/src/script/javascript/hannibal/cfg">
			<fileset dir="${project}/artifacts/" includes="hannibal.js" />
		</copy>

		<copy todir="${workspace}/build/src/cfg/hannibal">
			<fileset dir="${project}/artifacts/" includes="Hannibal.properties" />
		</copy>

		<copy todir="${workspace}/build/src/cfg/cache">
			<fileset dir="${project}/artifacts/" includes="cache.ccf" />
		</copy>

		<copy todir="${workspace}/build/src/cfg/web">
			<fileset dir="${project}/artifacts/" includes="web.xml, server.xml" />
		</copy>

		<copy todir="${workspace}/build/">
			<fileset dir="${project}/artifacts/" includes="hannibal.build, build.xml" />
		</copy>

		<copy todir="${workspace}/build/runtime-lib/hannibal">
			<fileset dir="${dist}/lib/" includes="*.jar" />
		</copy>

		<zip destfile="${dist}/hannibal-quick-project-${version}_${revision}.zip" basedir="${workspace}/build/"
			 includes="*/, **/*.*" />

    </target>  

	<target name="javadoc">
	   <javadoc
           destdir="${src.doc}/javadoc"
           author="true"
           version="true"
           use="true"
           windowtitle="${appName} Java API documentation">

		<classpath refid="test.class.path"/>

		<fileset dir="${src}" defaultexcludes="yes">
		</fileset>

		<doctitle><![CDATA[<h1>${appName}</h1>]]></doctitle>
		<bottom><![CDATA[<i>Generated by Hannibal for Application ${appName}</i>]]></bottom>
		<tag name="todo" scope="all" description="To do:"/>
		<group title="Hannibal Generated Code" packages="${package}.hannibal.*"/>
		<link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
	   </javadoc>
	</target>

    
</project>