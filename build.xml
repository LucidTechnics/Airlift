<!--
 Copyright 2010, Lucid Technics, LLC.

 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 except in compliance with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in
 writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 specific language governing permissions and limitations under the License.
-->
<project default="createPackageStructure" basedir=".">
	<description>  Build file </description>
  
	<property file="desktop.build" />
	<property environment="env"/>
	<property name="rootDir" value="${basedir}" />
	
	<property name="project" location="project" />
	<property name="archive" location="archive" />
	<property name="classes" location="classes" />
	<property name="workspace" location="workspace" />
	<property name="dist" location="dist" />
	<property name="junit-result" location="result" />
	<property name="runtime.lib" location="runtime-lib" />
	<property name="build.only.lib" location="build-only-lib" />
	<property name="env" location="env" />
	<property name="downloads" location="downloads" />
	<property name="bin" location="bin" />
	<property name="src" location="src" />
	<property name="src.shl" location="${src}/shl" />
	<property name="src.java" location="${src}/java" />
	<property name="src.script" location="${src}/script" />	
	<property name="src.javascript" location="${src.script}/javascript" />
	<property name="src.template" location="${src}/template" />
	<property name="src.test" location="${src}/test" />
	<property name="src.doc" location="${src}/doc" />
	<property name="src.cfg" location="${src}/cfg" />
	<property name="src.images" location="${src}/images" />
	<property name="src.script" location="${src}/script" />
	
	<property name="stage" location="stage" />
	<property name="stage.shl" location="${stage}/shl" />
	<property name="stage.java" location="${stage}/java" />
	<property name="stage.javascript" location="${stage}/java" />
	<property name="stage.template" location="${stage}/template" />
	<property name="stage.test" location="${stage}/test" />
	<property name="stage.cfg" location="${stage}/cfg" />
	<property name="stage.html" location="${stage}/html" />
	<property name="stage.images" location="${stage}/images" />
	<property name="stage.css" location="${stage}/css" />
	<property name="stage.script" location="${stage}/script" />
	<property name="stage.php" location="${stage}/php" />
	<property name="deployDir.shl" location="${deployDir}/shl" />
	<property name="deployDir.java" location="${deployDir}/java" />
	<property name="deployDir.template" location="${deployDir}/template" />
	<property name="deployDir.test" location="${deployDir}/test" />
	<property name="deployDir.javascript" location="${deployDir}/html" />
	<property name="deployDir.images" location="${deployDir}/images" />
	<property name="deployDir.script" location="${deployDir}/script" />
	<property name="deployDir.workspace" location="${deployDir}/workspace" />
	<property name="deployDir.bin" location="${deployDir}/bin" />
	<property name="deployDir.lib" location="${deployDir}/lib" />
	<property name="deployDir.log" location="${deployDir}/log" />
	
	<property name="jar" value="${appName}-${version}_${revision}" />
	<property name="testJar" value="${appName}Test-${version}_${revision}" />

	<property name="sdk.dir" location="${env.AIRLIFT_APP_ENGINE_HOME}" />

	<path id="build.class.path">
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<!-- Temporary addition for testing -->
		<fileset dir="${sdk.dir}/lib">
			<include name="testing/appengine-testing.jar"/>
			<include name="appengine-tools-api.jar"/>
		</fileset>
	</path>

	<path id="run.class.path">
		<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${src.cfg}">
			<include name="**/*.xml"/>
		</fileset>
	</path>

	<path id="test.class.path">
	   	<fileset dir="${deployDir.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${runtime.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<fileset dir="${build.only.lib}">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>		
		<fileset dir="${dist}">
			<include name="**/*Test*.jar"/>
		</fileset>
	</path>

	<!-- Clean -->
	<target name="clean" depends="clean-classes, clean-target" />

	<!-- Clean classes -->
	<target name="clean-classes">
		<delete dir="${classes}" />
		<delete dir="${dist}" />
		<mkdir dir="${dist}" />
	</target>

	<!-- Clean target -->
	<target name="clean-target">
	    <delete dir="${archive}" />
		<delete dir="${deployDir.bin}" />
		<delete dir="${deployDir.lib}" />
		<delete dir="${deployDir.cfg}" />
		<delete dir="${deployDir.log}" />
		<delete dir="${deployDir.html}" />
		<delete dir="${stage}" />
	</target>

	<target name="copyjars" description="Copies the App Engine jars to the war file.">
	    <delete dir="${runtime.lib}/appengine" />
		<mkdir dir="${runtime.lib}/appengine" />
		<echo message="${sdk.dir}/lib/user"/>
		<copy todir="${runtime.lib}/appengine" flatten="true">
			<fileset dir="${sdk.dir}/lib/user">
				<include name="**/*.jar" />
				<exclude name="orm/**/*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- Init -->
	<target name="init">

		<mkdir dir="${project}" />
		<mkdir dir="${project}/artifacts" />
		<mkdir dir="${project}/artifacts/runtime-lib" />
		<mkdir dir="${project}/artifacts/build-only-lib" />

	    <mkdir dir="${archive}" />
		<mkdir dir="${runtime.lib}" />
		<mkdir dir="${build.only.lib}" />
		
		<mkdir dir="${stage}" />
		<mkdir dir="${stage.shl}" />
		<mkdir dir="${stage.template}" />
		<mkdir dir="${stage.test}" />
		<mkdir dir="${stage.images}" />
		<mkdir dir="${stage.script}" />
		<mkdir dir="${stage.javascript}" />

		<mkdir dir="${src}" />
		<mkdir dir="${src.shl}" />
		<mkdir dir="${src.java}" />
		<mkdir dir="${src.javascript}" />
		<mkdir dir="${src.template}" />
		<mkdir dir="${src.test}" />
		<mkdir dir="${src.doc}" />
		<mkdir dir="${src.images}" />
		<mkdir dir="${src.script}" />

		<mkdir dir="${deployDir}" />
		<mkdir dir="${deployDir.lib}" />
		<mkdir dir="${deployDir.bin}" />
		<mkdir dir="${deployDir.log}" />
		<mkdir dir="${deployDir.shl}" />
		<mkdir dir="${deployDir.template}" />
		<mkdir dir="${deployDir.test}" />
		<mkdir dir="${deployDir.images}" />
		<mkdir dir="${deployDir.script}" />

		<mkdir dir="${classes}" />
		<mkdir dir="${workspace}" />

		<mkdir dir="${dist}" />
		<mkdir dir="${dist}/lib" />

		<mkdir dir="${junit-result}" />
		<mkdir dir="${workspace}" />
		<mkdir dir="${workspace}/env" />

	</target>

	<!-- Prepare source -->
	<target name="prepareSource" depends="createPackageStructure, copyYml">

		<copy todir="${stage}" >
			<fileset dir="${src}" includes="**/*.xml, **/*log4j.properties, **/*.bat, **/*.sh, **/*.0, **/*.cf, **/*.conf, **/*.st" />
		</copy>

		<replace dir="${stage}" propertyFile="token.properties">
		  <include name="**/*.*"/>
		  <replacefilter token="@LOG4J.JAR@" property="LOG4J.JAR"/>
		  <replacefilter token="@VERSION@" property="VERSION"/>
		  <replacefilter token="@APPNAME@" property="APPNAME"/>
		</replace>

		<replace dir="." propertyFile="token.properties">
		  <include name=".travis.yml"/>
		  
		  <replacefilter token="@APP.ENGINE.SDK@" property="app.engine.sdk" />
		</replace>

	</target>

	<target name="copyYml">
	  <copy file="${src}/cfg/travis.yml" tofile=".travis.yml" overwrite="true" />
	</target>
	  

  	<!-- Compile -->
	<target name="reCompile" depends="clean-classes, compile" />

	<target name="compile" depends="prepareSource">
		<property name="build.class.path" refId="build.class.path"/>
		<echo message="${build.class.path}"/>

		<javac includeantruntime="false" destdir="${classes}" debug="on" source="${java.source}" target="${java.target}">
			<classpath refid="build.class.path"/>
			<src path="${src.java}"/>
			<compilerarg line="-version" compiler="modern" />
		</javac>

		<javac includeantruntime="false" destdir="${classes}" debug="on" source="${java.source}" target="${java.target}">
			<classpath refid="build.class.path"/>
			<src path="${src.test}"/>
		</javac>
	</target>

	<!-- Jar -->
	<target name="jar" depends="compile">

		 <jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${classes}"
			   excludes="**\*Test.class,**\*TestSuite.class"
		  />

		<jar destfile="${dist}/lib/${testJar}-core.jar"
		       basedir="${classes}"
		  />

		<jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${stage.template}"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}-core.jar"
		       basedir="${src.script}/javascript"
			   update="true"
		  />

		<jar destfile="${dist}/lib/${jar}-test.jar"
		       basedir="${src.test}/airlift/test"
		  />

		<jar destfile="${dist}/lib/${jar}-test.jar"
		       basedir="${src.test}/airlift"
			   includes="harness.js"
			   update="true"
		  />

    </target>

	<!-- Redeploy -->
	<target name="redeploy" depends="clean-classes, clean-target, compile, jar, deploy" />
	<target name="redeployTemplate" depends="clean-target, prepareSource, deploy" />

	<!-- Deploy -->
	<target name="deploy">

		<copy todir="${deployDir.lib}" flatten="false">
			<fileset dir="${runtime.lib}" includes="**/*.jar" />
		</copy>

		<copy todir="${deployDir.lib}">
			<fileset dir="${dist}/lib" includes="*.jar" />
		</copy>

		<copy todir="${deployDir.bin}">
			<fileset dir="${stage.shl}" includes="**/*.sh, **/*.bat" />
		</copy>

		<!-- Make application shell scripts executable -->
		<chmod dir="${deployDir.bin}" includes="**/*.sh"  perm="ugo+rx"/>

		<copy todir="${deployDir.template}">
			<fileset dir="${src.template}" includes="**/*.*" />
		</copy>

		<copy todir="${deployDir.images}">
			<fileset dir="${src.images}" includes="**/*.*" />
		</copy>
		
	</target>

	<target name="env" >
		<delete>
			<fileset dir="${env}/war/WEB-INF/lib" includes="airlift-*core.jar"/>
		</delete>

		<copy todir="${env}/war/WEB-INF/lib">
			<fileset dir="${dist}/lib/" includes="${jar}-core.jar" />
		</copy>

		<zip destfile="${downloads}/${jar}-env.zip" basedir="${env}" />
	
	</target>

	<target name="create-download" depends="env, test" />

	<target name="setUpEnvironment" depends="env" >

	  <delete dir ="workspace/env" failonerror="false" includeEmptyDirs="true"/>
	  
	  <mkdir dir="workspace/env" />
	  <mkdir dir="workspace/env/war/WEB-INF/classes" />
	  <mkdir dir="workspace/env/war/WEB-INF/classes/handler" />
	  <mkdir dir="workspace/env/war/WEB-INF/classes/handler/registration" />
	  <mkdir dir="workspace/env/dist" />
	  <mkdir dir="workspace/env/dist/lib" />

	  <exec dir="." executable="unzip" newenvironment="false">
	    <arg value="-u" />
	    <arg value="${downloads}/${jar}-env.zip" />
	    <arg value="-d" />
	    <arg value= "${rootDir}/workspace/env"/>
	  </exec>
	  
	  <antcall target="checkDir" />

	  <copy todir="workspace/env/war/WEB-INF/classes/handler/registration">
			<fileset dir="${src}/test/script/javascript/handler/registration" />
	  </copy>
	  
	  <copy todir="workspace/env/src/test/airlift/test/integration">
			<fileset dir="${src}/test/airlift/test/integration">
			   <include name="**/*.js" />
			</fileset>
	  </copy>

	</target>

	<target name="runserver" depends="setUpEnvironment" description="Starts the new server WITHOUT running integration tests." >
	  <exec dir="workspace/env" executable="ant" newenvironment="true">
		 <arg value="runserver" />
	  </exec>
	</target>

	<target name="itest" description="Just does the integration test. " depends="">
	  <exec dir="workspace/env" executable="ant" newenvironment="true">
		 <arg value="itest" />
	  </exec>
	</target>

	<target name="test" description="Does unit and integration tests. " depends="utest">	  
	  <exec dir="workspace/env" executable="ant" newenvironment="true">
		 <arg value="test" />
	  </exec>
	</target>
	
	<target name="checkDir">

	  <condition property="handler1" value="true" else="false">
	      <available file="workspace/env/dist" type="dir" property="X"/>
	  </condition>
	  <echo message="workspace/env/dist found?: ${handler1}" />

	  <condition property="handler2" value="true" else="false">
	      <available file="workspace/env/${jar}-env" type="dir" property="X2"/>
	  </condition>
	  <echo message="workspace/env/airlift-beta-0.70_rc_108_734-env found (SHOULD BE FALSE!!)?: ${handler2}" />

	  <condition property="handler3" value="true" else="false">
	      <available file="workspace/env/airlift" type="dir" property="X3"/>
	  </condition>
	  <echo message="workspace/env/airlift found?: ${handler3}" />

	</target>

	<target name="createRootPackageDirProperty" >

	  <pathconvert property="java.package.dir" targetos="${targetOs}" >
		  <path path="${rootPackage}" />
		  <mapper>
			 <chainedmapper>
				 <flattenmapper/>
				 <unpackagemapper from="*" to="${src.java}${file.separator}*" casesensitive="yes"/>
			 </chainedmapper>
		  </mapper>
	  </pathconvert>

	</target>

	<target name="createPackageStructure" depends="init, createRootPackageDirProperty" >
	   	  
		<mkdir dir="${java.package.dir}" />
		<mkdir dir="${java.package.dir}/util" />
		<mkdir dir="${java.package.dir}/exception" />				
		<mkdir dir="${java.package.dir}/domain" />
		<mkdir dir="${java.package.dir}/persist" />
		<mkdir dir="${java.package.dir}/dao" />
		<mkdir dir="${java.package.dir}/dao/search" />
		<mkdir dir="${java.package.dir}/dao/db" />
		<mkdir dir="${java.package.dir}/dao/serialize" />
		<mkdir dir="${java.package.dir}/controller" />				
		<mkdir dir="${java.package.dir}/servlet" />
		
	</target>			

	<target name="utest" depends="redeploy">
	   	<property name="run.class.path" refId="test.class.path"/>
		<echo message="${run.class.path}"/>
		<script language="javascript" src="test.js">
		    <classpath refid="test.class.path"/>			
		</script>
	</target>
	
</project>