<?xml version="1.0" encoding="MacRoman"?>
<pmd-cpd>
<duplication lines="130" tokens="759">
<file line="242" path="/Users/dyhodge/projects/airlift/src/java/airlift/generator/JavaGenerator.java"/>
<file line="400" path="/Users/dyhodge/projects/airlift/src/java/airlift/generator/JavaGenerator.java"/>
<codefragment>
<![CDATA[
			attributeStringTemplate.setAttribute("scope", "private");
			attributeStringTemplate.setAttribute("type", type);
			attributeStringTemplate.setAttribute("name", name);

			getterStringTemplate.setAttribute("scope", scope);
			getterStringTemplate.setAttribute("type", type);
			getterStringTemplate.setAttribute("getterName", getterName);
			getterStringTemplate.setAttribute("name", name);

			setterStringTemplate.setAttribute("scope", scope);
			setterStringTemplate.setAttribute("type", type);
			setterStringTemplate.setAttribute("setterName", setterName);
			setterStringTemplate.setAttribute("name", name);

			printMessage("Checking is type: " + type);

			if (isArrayType(type) == true)
			{
				stringBufferStringTemplate.setAttribute("getterName", "airlift.util.AirliftUtil.generateStringFromArray(" + getterName + "())");
			}
			else
			{
				stringBufferStringTemplate.setAttribute("getterName", getterName + "()");
			}

			stringBufferStringTemplate.setAttribute("name", name);

		}

		if (_domainObjectModel.isClockable() == true)
		{
			attributeStringTemplate.setAttribute("scope", "private");
			attributeStringTemplate.setAttribute("type", "java.lang.String");
			attributeStringTemplate.setAttribute("name", "source");

			getterStringTemplate.setAttribute("scope", "public");
			getterStringTemplate.setAttribute("type", "java.lang.String");
			getterStringTemplate.setAttribute("getterName", "getSource");
			getterStringTemplate.setAttribute("name", "source");

			setterStringTemplate.setAttribute("scope", "public");
			setterStringTemplate.setAttribute("type", "java.lang.String");
			setterStringTemplate.setAttribute("setterName", "setSource");
			setterStringTemplate.setAttribute("name", "source");

			stringBufferStringTemplate.setAttribute("getterName", "getSource()");
			stringBufferStringTemplate.setAttribute("name", "source");

			attributeStringTemplate.setAttribute("scope", "private");
			attributeStringTemplate.setAttribute("type", "java.lang.Integer");
			attributeStringTemplate.setAttribute("name", "clock");

			getterStringTemplate.setAttribute("scope", "public");
			getterStringTemplate.setAttribute("type", "java.lang.Integer");
			getterStringTemplate.setAttribute("getterName", "getClock");
			getterStringTemplate.setAttribute("name", "clock");

			setterStringTemplate.setAttribute("scope", "public");
			setterStringTemplate.setAttribute("type", "java.lang.Integer");
			setterStringTemplate.setAttribute("setterName", "setClock");
			setterStringTemplate.setAttribute("name", "clock");

			stringBufferStringTemplate.setAttribute("getterName", "getClock()");
			stringBufferStringTemplate.setAttribute("name", "clock");

			attributeStringTemplate.setAttribute("scope", "private");
			attributeStringTemplate.setAttribute("type", "java.lang.String");
			attributeStringTemplate.setAttribute("name", "hash");

			getterStringTemplate.setAttribute("scope", "public");
			getterStringTemplate.setAttribute("type", "java.lang.String");
			getterStringTemplate.setAttribute("getterName", "getHash");
			getterStringTemplate.setAttribute("name", "hash");

			setterStringTemplate.setAttribute("scope", "public");
			setterStringTemplate.setAttribute("type", "java.lang.String");
			setterStringTemplate.setAttribute("setterName", "setHash");
			setterStringTemplate.setAttribute("name", "hash");

			stringBufferStringTemplate.setAttribute("getterName", "getHash()");
			stringBufferStringTemplate.setAttribute("name", "hash");

			attributeStringTemplate.setAttribute("scope", "private");
			attributeStringTemplate.setAttribute("type", "java.util.Date");
			attributeStringTemplate.setAttribute("name", "createDate");

			getterStringTemplate.setAttribute("scope", "public");
			getterStringTemplate.setAttribute("type", "java.util.Date");
			getterStringTemplate.setAttribute("getterName", "getCreateDate");
			getterStringTemplate.setAttribute("name", "createDate");

			setterStringTemplate.setAttribute("scope", "public");
			setterStringTemplate.setAttribute("type", "java.util.Date");
			setterStringTemplate.setAttribute("setterName", "setCreateDate");
			setterStringTemplate.setAttribute("name", "createDate");

			stringBufferStringTemplate.setAttribute("getterName", "getCreateDate()");
			stringBufferStringTemplate.setAttribute("name", "createDate");

			attributeStringTemplate.setAttribute("scope", "private");
			attributeStringTemplate.setAttribute("type", "java.util.Date");
			attributeStringTemplate.setAttribute("name", "updateDate");

			getterStringTemplate.setAttribute("scope", "public");
			getterStringTemplate.setAttribute("type", "java.util.Date");
			getterStringTemplate.setAttribute("getterName", "getUpdateDate");
			getterStringTemplate.setAttribute("name", "updateDate");

			setterStringTemplate.setAttribute("scope", "public");
			setterStringTemplate.setAttribute("type", "java.util.Date");
			setterStringTemplate.setAttribute("setterName", "setUpdateDate");
			setterStringTemplate.setAttribute("name", "updateDate");

			stringBufferStringTemplate.setAttribute("getterName", "getUpdateDate()");
			stringBufferStringTemplate.setAttribute("name", "updateDate");
		}

		domainObjectStringTemplate.setAttribute("attributes", attributeStringTemplate);
		domainObjectStringTemplate.setAttribute("attributeGetters", getterStringTemplate);
		domainObjectStringTemplate.setAttribute("attributeSetters", setterStringTemplate);
		domainObjectStringTemplate.setAttribute("attributeStringBufferAppends", stringBufferStringTemplate);
		domainObjectStringTemplate.setAttribute("generatorComment", comment	);
		domainObjectStringTemplate.setAttribute("package", _domainObjectModel.getRootPackageName());
		domainObjectStringTemplate.setAttribute("fullClassName", _domainObjectModel.getFullyQualifiedClassName());
		domainObjectStringTemplate.setAttribute("className", upperTheFirstCharacter(_domainObjectModel.getClassName()));

		return domainObjectStringTemplate.toString();
	}

	public String generateDao(DomainObjectModel _domainObjectModel)
]]>
</codefragment>
</duplication>
<duplication lines="56" tokens="333">
<file line="538" path="/Users/dyhodge/projects/airlift/src/java/airlift/generator/JavaGenerator.java"/>
<file line="58" path="/Users/dyhodge/projects/airlift/src/java/airlift/generator/JavaScriptGenerator.java"/>
<codefragment>
<![CDATA[
		java.util.Iterator attributes = _domainObjectModel.getAttributes();

		boolean hasPrimaryKey = false;
		boolean updateIsAvailable = false;

		String isUndoable = "false";

		while (attributes.hasNext() == true)
		{
			String isSearchable = "false";

			Attribute attribute = (Attribute) attributes.next();
			Annotation persist = (Annotation) _domainObjectModel.getAnnotation(attribute,"airlift.generator.Persistable");
			Annotation search = (Annotation) _domainObjectModel.getAnnotation(attribute,"airlift.generator.Searchable");
			Annotation undo = (Annotation) _domainObjectModel.getAnnotation(attribute,"airlift.generator.Undoable");

			isUndoable = (undo != null) ? findValue(undo, "isUndoable()") : "false";

			String requestPersistence = findValue(persist, "isPersistable()");
			String requestSearchable = findValue(persist, "isSearchable()");			

			if ("true".equals(requestPersistence) == true)
			{
				String type = attribute.getType();

				if (isPersistable(type) == false)
				{
					throw new RuntimeException("No persistence support for complex object types like: " + type);
				}

				String fieldName = attribute.getName();
				String name = attribute.getName();
				String isPrimaryKey = findValue(persist, "isPrimaryKey()");
				String rangeable = findValue(persist, "rangeable()");
				String isImmutable = findValue(persist, "immutable()");

				if (search != null)
				{
					isSearchable = findValue(search, "isSearchable()");
				}

				hasPrimaryKey = true;

				StringTemplate daoAttributeStringTemplate = getStringTemplateGroup().getInstanceOf("airlift/dao/DaoAttribute");

				daoAttributeStringTemplate.setAttribute("findByThisAttributeSql", databaseGenerator.generateFindByThisAttributeSql(_domainObjectModel, fieldName));
				daoAttributeStringTemplate.setAttribute("attributeName", name);
				daoAttributeStringTemplate.setAttribute("attributeType", type);
				daoAttributeStringTemplate.setAttribute("uppercaseAttributeName", upperTheFirstCharacter(name));
				daoAttributeStringTemplate.setAttribute("className", upperTheFirstCharacter(_domainObjectModel.getClassName()));
				daoStringTemplate.setAttribute("collectByAttribute", daoAttributeStringTemplate.toString());

				StringTemplate daoRangeStringTemplate = getStringTemplateGroup().getInstanceOf("airlift/dao/DaoRange");

				daoRangeStringTemplate.setAttribute("findByRangeSql", databaseGenerator.generateFindThisRangeSql(_domainObjectModel, fieldName));
				daoRangeStringTemplate.setAttribute("rangeParameters", type + " lowerBound, " + type + " upperBound");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="126">
<file line="48" path="/Users/dyhodge/projects/airlift/src/java/airlift/servlet/rest/ErrorHandlerContext.java"/>
<file line="54" path="/Users/dyhodge/projects/airlift/src/java/airlift/servlet/rest/HtmlHandlerContext.java"/>
<codefragment>
<![CDATA[
		String rootPackageName = _httpServlet.getServletConfig().getInitParameter("a.root.package.name");
		
		ContentContext contentContext = new SimpleContentContext();

		JavascriptingUtil scriptingUtil = new JavascriptingUtil(this.productionMode);

		String servletName = _httpServlet.getServletName();
		String base = "http://" + _httpServletRequest.getServerName() + ":" +
					  _httpServletRequest.getServerPort() + "/";

		String pathInfo = ((_httpServletRequest.getPathInfo() == null) &&
						  ("".equals(_httpServletRequest.getPathInfo()) == false)) ? "" : _httpServletRequest.getPathInfo();
		String path = _httpServletRequest.getServletPath() + pathInfo;
		path = path.replaceFirst("/$", "").replaceFirst("^/", "");

		String queryString = _httpServletRequest.getQueryString();
		
		RestContext restContext = new RestContext(_uriParameterMap);
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="105">
<file line="280" path="/Users/dyhodge/projects/airlift/src/java/airlift/util/AirliftUtil.java"/>
<file line="299" path="/Users/dyhodge/projects/airlift/src/java/airlift/util/AirliftUtil.java"/>
<codefragment>
<![CDATA[
					else if (java.sql.Timestamp.class.equals(propertyDescriptor.getPropertyType()) == true)
					{
						airlift.generator.Datable datable = airlift.util.AirliftUtil.getMethodAnnotation(_do.getClass(), propertyDescriptor.getName(), airlift.generator.Datable.class);

						String mask = "MM-dd-yyyy HH:mm:ss";

						if (datable != null)
						{
							String[] patternArray = datable.dateTimePatterns();

							if (patternArray != null && patternArray.length > 0)
							{
								mask = patternArray[0];
							}
						}

						value = airlift.util.FormatUtil.format((java.sql.Timestamp) rawValue, mask);
]]>
</codefragment>
</duplication>
</pmd-cpd>