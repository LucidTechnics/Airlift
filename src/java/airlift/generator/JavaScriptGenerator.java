/*
 Copyright 2011, Lucid Technics, LLC.

 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 except in compliance with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in
 writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 specific language governing permissions and limitations under the License.
*/

package airlift.generator;

import org.antlr.stringtemplate.StringTemplate;
import org.apache.commons.lang.StringUtils;

import javax.lang.model.element.Element;
import java.util.Map;

// TODO: Auto-generated Javadoc
/**
 * The Class JavaScriptGenerator.
 */
public class JavaScriptGenerator
   extends Generator
{
	
	/** The comment. */
	public String comment = "This JavaScript code has been generated by airlift. Do not modify this code.";

	/* (non-Javadoc)
	 * @see airlift.generator.Generator#generate(java.lang.String, java.lang.String, javax.lang.model.element.Element, airlift.generator.DomainObjectModel, java.util.Map)
	 */
	public void generate(String _appName,
				String _directory,
				Element _element,
				ResourceModel _resourceModel,
				Map<String, ResourceModel> _elementNameToResourceModelMap)
	{
		//transitioning from the Java 6 compiler to dictate.js
	}
	
	/**
	 * Generate active record.
	 *
	 * @param _domainObjectModel the _domain object model
	 * @return the string
	 */
	public String generateResourceMetadata(ResourceModel _resourceModel)
	{
		String resourceName = _resourceModel.getClassName().toLowerCase();
		StringTemplate resourceMetadataStringTemplate = getStringTemplateGroup().getInstanceOf("airlift/language/javascript/ResourceMetadata");
		StringTemplate configTemplate = getStringTemplateGroup().getInstanceOf("airlift/language/javascript/JavaScriptObject");
		
		for (String annotationName: _resourceModel.getResourceAnnotationMap().keySet())
		{
			configTemplate.setAttribute("name", annotationName.toLowerCase());
			configTemplate.setAttribute("value", "true");
		}

		if (_resourceModel.getLookingAt() != null)
		{
			configTemplate.setAttribute("name", "lookingat");
			configTemplate.setAttribute("value", "\"" + _resourceModel.getLookingAt().toLowerCase() + "\"");
		}
		
		resourceMetadataStringTemplate.setAttribute("resourceName", resourceName);
		resourceMetadataStringTemplate.setAttribute("config", configTemplate.toString());

		java.util.Iterator attributes = _resourceModel.getAttributes();

		while (attributes.hasNext() == true)
		{
			Attribute attribute = (Attribute) attributes.next();
			resourceMetadataStringTemplate.setAttribute("propertyName", attribute.getName());

			for (Annotation annotation: _resourceModel.getAttributeAnnotationSetMap().get(attribute))
			{
				for (Map.Entry<String, Object> entry: annotation.getParameterMap().entrySet())
				{
					String name = entry.getKey();

					if ("isIndexable".equalsIgnoreCase(name) == true && ((Boolean)entry.getValue()) == true)
					{
						resourceMetadataStringTemplate.setAttribute("indexedProperty", attribute.getName());
					}
					else if ("isSearchable".equalsIgnoreCase(name) == true && ((Boolean)entry.getValue()) == true)
					{
						resourceMetadataStringTemplate.setAttribute("searchProperty", attribute.getName());
					}
					else if ("encrypted".equalsIgnoreCase(name) == true && ((Boolean)entry.getValue()) == true)
					{
						resourceMetadataStringTemplate.setAttribute("encryptedProperty", attribute.getName());
					}
					else if ("mapTo".equalsIgnoreCase(name) == true)
					{
						resourceMetadataStringTemplate.setAttribute("foreignKeyName", attribute.getName());
					}
					else if ("mapToMany".equalsIgnoreCase(name) == true)
					{
						resourceMetadataStringTemplate.setAttribute("foreignKeyName", attribute.getName());
					}

				}
			}
		}

		return resourceMetadataStringTemplate.toString();
	}

	/**
	 * Generate validation object.
	 *
	 * @param _resourceModel the _resource object model
	 * @return the string
	 */
	public String generateAttributeMetadata(ResourceModel _resourceModel)
	{
		String resourceName = _resourceModel.getClassName().toLowerCase();
		StringTemplate attributeMetadataStringTemplate = getStringTemplateGroup().getInstanceOf("airlift/language/javascript/AttributeMetadata");
		attributeMetadataStringTemplate.setAttribute("resourceName", resourceName);
		
		java.util.Iterator attributes = _resourceModel.getAttributes();

		while (attributes.hasNext() == true)
		{
			Attribute attribute = (Attribute) attributes.next();

			StringTemplate configTemplate = getStringTemplateGroup().getInstanceOf("airlift/language/javascript/JavaScriptObject");
			configTemplate.setAttribute("name", "name");
			configTemplate.setAttribute("value", "\"" + attribute.getName() + "\"");

			configTemplate.setAttribute("name", "type");
			configTemplate.setAttribute("value", "\"" + attribute.getType() + "\"");
			
			for (Annotation annotation: _resourceModel.getAttributeAnnotationSetMap().get(attribute))
			{
				for (Map.Entry<String, Object> entry: annotation.getParameterMap().entrySet())
				{
					String name = entry.getKey();
					
					configTemplate.setAttribute("name", name);
					configTemplate.setAttribute("value", entry.getValue());

					if ("mapTo".equalsIgnoreCase(name) == true)
					{
						attributeMetadataStringTemplate.setAttribute("foreignKeyName", attribute.getName().substring(0, (attribute.getName().length())));
					}
					else if ("mapToMany".equalsIgnoreCase(name) == true)
					{
						attributeMetadataStringTemplate.setAttribute("foreignKeyName", attribute.getName().substring(0, (attribute.getName().length())));
					}

				}
			}

			attributeMetadataStringTemplate.setAttribute("propertyName", attribute.getName());
			attributeMetadataStringTemplate.setAttribute("propertyConfig", configTemplate.toString());
		}

		return attributeMetadataStringTemplate.toString();
	}

	/**
	 * Generate resource constructors.
	 *
	 * @param _elementNameToresourceModelMap the _element name to resource object model map
	 * @return the string
	 */
	public String generateResourceConstructors(Map<String, ResourceModel> _elementNameToResourceModelMap)
	{
		StringTemplate template = getStringTemplateGroup().getInstanceOf("airlift/language/javascript/ResourceConstructors");
		boolean isHighLevelAttributesSet = false;

		for (ResourceModel resourceModel: _elementNameToResourceModelMap.values())
		{
			if (resourceModel.isAbstractResource() == false)
			{
				if (isHighLevelAttributesSet == false)
				{
					template.setAttribute("appName", resourceModel.getAppName());

					isHighLevelAttributesSet = true;
				}

				template.setAttribute("appNameMethod", resourceModel.getAppName());
				template.setAttribute("resourceName", lowerTheFirstCharacter(resourceModel.getClassName()));
			}
		}

		return template.toString();
	}
}